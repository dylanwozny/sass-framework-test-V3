// flex: 1 divies up extra space in CONTAINER to all items......
// depedant on extra space !
// to make work, each item needs a flex property for relative reference
// USE THIS FOR GUTTERS
// width | flex-basis: calc(33.33333% - 20px);
// margin: 10px;

// AUTO PREFIXER
// GULP video on wes bos

body {
  max-width: 80rem;
  margin: 0 auto;
}

// background color universal
// mixin

@mixin blackBackground($Bw, $Bc, $rgbavalue) {
  border: solid $Bw $Bc;
  background: $rgbavalue;
  margin-bottom: 3rem;
  text-align: center;
}

section,
header,
footer,
nav {
  @include blackBackground(3px, black, rgba(0, 0, 0, 0.5));
}

// FLEX NAV and FOOTER

.container {
  display: flex;
  // for flex wrap to work, items need width,(flex-basis)
  flex-wrap: wrap;
  flex-direction: row;
  margin: 0 auto;
  // for gutter space on bordering boxes
  //   padding: 10px;
  // border: solid 5px black;
  // justify-content: space-around;
  // align-items: baseline;
  // align-content: center;
  // height: 100vh;
  // height: 10rem;
  // max-width: 80rem;
  img {
    width: 2.5rem;
    height: 1.5rem;
    margin-bottom: 0.3rem;
    // vertical-align: middle;
    // height: 100%;
  }

  a {
    // font-size: 1.5rem;
    text-align: center;

    padding: 0.5rem;
    // for horizontal alignment of full button !!!
    display: inline-block;
    line-height: 3;
    width: 100%;

    // height: 100%;
    // padding: 50% 0;
    // vertical-align: middle;
  }
}

.box {
  // minus gutter space
  // width: calc(33.33333% - 20px);
  // margin: 10px;

  // USEFUL FOR RESPONSIVE NAVBAR !!!
  // only works on row, when flex wrap on!
  // find default width of device and use flex-basis value to add up to it ?
  // flex-basis is default start size !
  // flex-basis: calc(33.33333% - 20px);

  // flex-grow: 0; means dont grow at all, default
  // flex-grow is relative to value and extra space ex.
  // flex-grow: 1 vs flex-grow: 5 <---- 5 gets 5x as much extra space as 1 !
  // flex-grow: 1;

  // flex-shrink: 1 is default.
  // how much space should i give up in perportion oppposed to the other item
  // flex-shrink: 10;

  // flex: 1 distrubutes the row evenly
  // flex: grow | shrink | basis
  // flex-basis: 500px;
  // flex-grow: 1;
  // flex-basis: 250px;
  // flex: 85% 1 1;
  flex: 2.5;
  font-size: 1.5rem;
  text-align: center;
  color: white;
  // padding: 0.5rem;
  // width: 33.3333%;
  // background: rgba(0, 0, 0, 0.5);
}

a:hover {
  background: rgba(0, 0, 0, 0.8);
  border: none;
}

// .box:hover {
//   background: rgba(0, 0, 0, 0.8);
//   border: none;
// }

.box-social {
  // background: brown;
  flex: 1;
}

@media (max-width: 1000px) {
  // .container {
  //   flex-direction: column;
  // }

  .box {
    flex: 1 1 50%;
  }

  .box-social {
    flex: 1 1 25%;
  }
}

// implement mobile nav bar as per flex video.....Mobile content reordering with Flexbox

@media (max-width: 500px) {
  .box {
    flex-basis: 100%;
  }

  .box-social {
    flex: 1 1 25%;
  }
  // messing with order when under 500px(mainly nav bar)
  // flex container
  .wrapper {
    display: flex;
    flex-direction: column;
  }
  // flex items
  // grab imeddiate children of .wrapper
  .wrapper > * {
    order: 999;
  }
  .flex-nav {
    order: 1;
  }

  .flex-header {
    order: 2;
  }
}

// .box1 {
//   // background: purple;
//   // flex-grow: 5;

//   // flex-shrink: 5;
//   // flex: 1 1 400px;

//   // flex-basis: 400px;
//   // align-self: center;
//   // font-size: 5rem;

//   // align-self: flex-end;
// }
// .box2 {
//   // background: grey;
//   // flex-basis: 100px;
//   // align-self: stretch;
//   // align-self: flex-start;
//   // flex: 2;
//   // flex: 15% 1 2;
// }
// .box3 {
//   // background: brown;
//   @extend .box1;
// }
// .box4 {
//   // background: tomato;
//   @extend .box2;
// }
// .box5 {
//   @extend .box1;
//   // background: green;
// }
// .box6 {
//   @extend .box2;
//   // background: yellowgreen;
// }
// .box7 {
//   @extend .box1;
//   // background: aquamarine;
// }
// .box8 {
//   @extend .box2;
//   // background: lightcoral;
// }
// .box9 {
//   @extend .box1;
//   // background: black;
// }

// .box10 {
//   @extend .box2;
//   // background: honeydew;
// }

// // @extend
// //
